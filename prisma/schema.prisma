// ============================================================================
// RANDOMTRIP - Clean Prisma Schema
// ============================================================================
// Fresh start with Trip-focused model
// Backup of old schema: schema.backup.prisma
// ============================================================================

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================================================
// CORE MODELS
// ============================================================================

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  password  String?
  avatarUrl String?
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // User preferences
  travelerType  String?
  interests     String[] @default([])
  dislikes      String[] @default([])
  
  // Relations
  trips   Trip[]
  reviews Review[]
  
  @@map("users")
}

model Trip {
  id     String     @id @default(cuid())
  userId String
  status TripStatus @default(DRAFT)
  
  // Journey metadata
  from  String? // 'tripper' | ''
  type  String  // 'couple' | 'family' | 'group' | 'solo' | 'honeymoon' | 'paws'
  level String  // 'essenza' | 'modo-explora' | 'explora-plus' | 'bivouac' | 'atelier-getaway'
  
  // Logistics
  country   String
  city      String
  startDate DateTime?
  endDate   DateTime?
  nights    Int      @default(1)
  pax       Int      @default(1)
  
  // Filters
  transport         String   @default("avion")
  climate           String   @default("indistinto")
  maxTravelTime     String   @default("sin-limite")
  departPref        String   @default("indistinto")
  arrivePref        String   @default("indistinto")
  avoidDestinations String[] @default([])
  
  // Addons (JSON for flexibility)
  addons Json? // Array of { id: string, qty: number, optionId?: string }
  
  // Pricing
  basePriceUsd   Float  @default(0)
  displayPrice   String @default("")
  filtersCostUsd Float  @default(0)
  addonsCostUsd  Float  @default(0)
  totalPerPaxUsd Float  @default(0)
  totalTripUsd   Float  @default(0)
  
  // Completed trip data (optional - populated after trip completion)
  actualDestination     String?   // Revealed destination
  destinationRevealedAt DateTime? // When destination was revealed (48h before)
  completedAt           DateTime? // When trip was marked as completed
  customerRating        Int?      // 1-5 star rating
  customerFeedback      String?   // Customer review/feedback
  tripPhotos            Json?     // Array of photo URLs from the trip
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  payment Payment?
  
  @@map("trips")
}

model Payment {
  id                   String        @id @default(cuid())
  tripId               String        @unique
  provider             String
  providerPaymentId    String?
  providerPreferenceId String?
  providerSessionId    String?
  amount               Float
  currency             String        @default("USD")
  paymentMethod        String?
  cardLast4            String?
  cardBrand            String?
  status               PaymentStatus @default(PENDING)
  providerResponse     Json?
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  trip Trip @relation(fields: [tripId], references: [id], onDelete: Cascade)
  
  @@map("payments")
}

model Review {
  id          String  @id @default(cuid())
  userId      String
  rating      Int
  title       String
  content     String
  tripType    String
  destination String
  isApproved  Boolean @default(false)
  isPublic    Boolean @default(true)
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("reviews")
}

// ============================================================================
// ENUMS
// ============================================================================

enum TripStatus {
  DRAFT
  SAVED
  PENDING_PAYMENT
  CONFIRMED
  REVEALED
  COMPLETED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  REFUNDED
}
