// ============================================================================
// RANDOMTRIP - Clean Prisma Schema
// ============================================================================
// Fresh start with Trip-focused model
// Backup of old schema: schema.backup.prisma
// ============================================================================

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================================================
// CORE MODELS
// ============================================================================

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  password  String?
  avatarUrl String?
  role      UserRole @default(CLIENT)
  
  // Tripper-specific fields
  tripperSlug    String? @unique  // For trippers: 'dawson', 'alma', etc.
  commission     Float?           // Tripper's commission rate (0.12 = 12%)
  availableTypes String[] @default([]) // ['solo', 'couple', 'group']
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // User preferences
  travelerType  String?
  interests     String[] @default([])
  dislikes      String[] @default([])
  
  // Relations
  trips       Trip[]     @relation("CustomerTrips")
  ownedTrips  Trip[]     @relation("OwnedTrips")
  payments    Payment[]
  reviews     Review[]
  likedTrips  TripLike[]
  
  @@map("users")
}

model Trip {
  id     String     @id @default(cuid())
  userId String
  status TripStatus @default(DRAFT)
  
  // Trip Ownership & Visibility
  ownerId    String?    // Tripper or Admin who created/curates this trip
  ownerType  OwnerType  @default(CUSTOMER) // Who created it
  isTemplate Boolean    @default(false)     // Can be used as inspiration
  isFeatured Boolean    @default(false)     // Show in tripper's gallery
  likes      Int        @default(0)         // Like counter
  
  // Journey metadata
  from  String? // 'tripper-slug' | 'admin' | null
  type  String  // 'couple' | 'family' | 'group' | 'solo' | 'honeymoon' | 'paws'
  level String  // 'essenza' | 'modo-explora' | 'explora-plus' | 'bivouac' | 'atelier-getaway'
  
  // Display info for templates
  title       String?   // "Aventura Urbana Misteriosa"
  teaser      String?   // Short description
  description String?   // Full description
  heroImage   String?   // Main image for card
  tags        String[]  @default([]) // ['adventure', 'cultural']
  highlights  String[]  @default([]) // ["3 noches", "Hotel boutique"]
  
  // Logistics
  country   String
  city      String
  startDate DateTime?
  endDate   DateTime?
  nights    Int      @default(1)
  pax       Int      @default(1)
  
  // Filters
  transport         String   @default("avion")
  climate           String   @default("indistinto")
  maxTravelTime     String   @default("sin-limite")
  departPref        String   @default("indistinto")
  arrivePref        String   @default("indistinto")
  avoidDestinations String[] @default([])
  
  // Addons (JSON for flexibility)
  addons Json? // Array of { id: string, qty: number, optionId?: string }
  
  // Pricing
  basePriceUsd   Float  @default(0)
  displayPrice   String @default("")
  filtersCostUsd Float  @default(0)
  addonsCostUsd  Float  @default(0)
  totalPerPaxUsd Float  @default(0)
  totalTripUsd   Float  @default(0)
  
  // Completed trip data (optional - populated after trip completion)
  actualDestination     String?   // Revealed destination
  destinationRevealedAt DateTime? // When destination was revealed (48h before)
  completedAt           DateTime? // When trip was marked as completed
  customerRating        Int?      // 1-5 star rating
  customerFeedback      String?   // Customer review/feedback
  tripPhotos            Json?     // Array of photo URLs from the trip
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  user       User       @relation("CustomerTrips", fields: [userId], references: [id], onDelete: Cascade)
  owner      User?      @relation("OwnedTrips", fields: [ownerId], references: [id], onDelete: SetNull)
  payment    Payment?
  tripLikes  TripLike[]
  
  @@map("trips")
}

model Payment {
  id                   String        @id @default(cuid())
  
  // Relations
  userId               String        // Direct relation to user
  tripId               String        @unique
  user                 User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  trip                 Trip          @relation(fields: [tripId], references: [id], onDelete: Cascade)
  
  // Provider Information
  provider             String        // 'mercadopago' | 'stripe' | 'paypal'
  providerPaymentId    String?       // MP payment ID
  providerPreferenceId String?       // MP preference ID
  providerMerchantOrderId String?    // MP merchant order ID
  providerSessionId    String?       // Session/token for provider
  
  // Payment Details
  amount               Float         // Total amount paid
  currency             String        @default("ARS") // Changed from USD to ARS
  exchangeRate         Float?        // If paid in different currency
  
  // Payment Method Details
  paymentMethod        String?       // 'credit_card' | 'debit_card' | 'digital_wallet'
  cardLast4            String?       // Last 4 digits
  cardBrand            String?       // 'visa' | 'mastercard' | 'amex'
  cardExpiryMonth      Int?          // MM
  cardExpiryYear       Int?          // YYYY
  cardholderName       String?       // Cardholder name
  
  // MercadoPago Specific
  mpExternalReference  String?       // External reference sent to MP
  mpDescription        String?       // Payment description
  mpStatementDescriptor String?      // Statement descriptor
  mpMetadata           Json?         // Additional MP metadata
  
  // Payment Status & Flow
  status               PaymentStatus @default(PENDING)
  statusDetail         String?       // MP status detail (e.g., 'accredited', 'pending_waiting_payment')
  failureReason        String?       // Reason if payment failed
  
  // Financial Tracking
  netAmount            Float?        // Amount after fees
  feeAmount            Float?        // Provider fees
  taxAmount            Float?        // Tax amount
  
  // Refund & Chargeback
  refundedAmount       Float         @default(0)
  refundedAt           DateTime?
  chargebackAmount     Float         @default(0)
  chargebackAt         DateTime?
  
  // Provider Response Data
  providerResponse     Json?         // Full provider response
  webhookData          Json?         // Webhook payload data
  
  // Timestamps
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @updatedAt
  paidAt               DateTime?     // When payment was completed
  expiresAt            DateTime?     // When payment preference expires
  
  @@map("payments")
}

model Review {
  id          String  @id @default(cuid())
  userId      String
  rating      Int
  title       String
  content     String
  tripType    String
  destination String
  isApproved  Boolean @default(false)
  isPublic    Boolean @default(true)
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("reviews")
}

model TripLike {
  id        String   @id @default(cuid())
  tripId    String
  userId    String
  createdAt DateTime @default(now())
  
  // Relations
  trip Trip @relation(fields: [tripId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([tripId, userId])
  @@map("trip_likes")
}

// ============================================================================
// ENUMS
// ============================================================================

enum UserRole {
  CLIENT
  TRIPPER
  ADMIN
}

enum OwnerType {
  CUSTOMER  // Regular user creating their own trip
  TRIPPER   // Tripper creating a template/featured trip
  ADMIN     // RandomTrip admin creating trips
}

enum TripStatus {
  DRAFT
  SAVED
  PENDING_PAYMENT
  CONFIRMED
  REVEALED
  COMPLETED
  CANCELLED
}

enum PaymentStatus {
  PENDING              // Payment created, waiting for user action
  PROCESSING           // Payment in progress
  APPROVED             // Payment approved by provider
  COMPLETED            // Payment fully processed and funds received
  PENDING_WAITING_PAYMENT // MP: Waiting for payment method
  PENDING_WAITING_CONFIRMATION // MP: Waiting for confirmation
  FAILED               // Payment failed
  CANCELLED            // Payment cancelled by user or system
  REFUNDED             // Payment refunded
  PARTIALLY_REFUNDED   // Partial refund
  CHARGEBACK           // Chargeback initiated
  IN_PROCESS           // MP: Payment being processed
  IN_MEDIATION         // MP: Payment in mediation
  REJECTED             // MP: Payment rejected
}
